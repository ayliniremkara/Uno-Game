import random


class UnoCard:

    def __init__(self, number, color):
        self.number = number
        self.color = color

    def __str__(self):
        return str(self.color) + ' ' + str(self.number)

    def is_match(self, other):
        return (self.color == other.color) or (self.number == other.number)


class CollectionOfUnoCard:

    def __init__(self):
        self.deck = []
        for color in ['Red', 'Blue', 'Green', 'Yellow']:
            self.deck.append(UnoCard(0, color))
            for i in range(2):
                for n in range(1, 10):
                    self.deck.append(UnoCard(n, color))
        random.shuffle(self.deck)

    def __str__(self):
        return 'An Uno deck with ' + str(len(self.deck)) + ' cards remaining.'

    def is_empty(self):
        return len(self.deck) == 0

    def deal_card(self):
        return self.deck.pop()

    def reset_deck(self, pile):
        self.deck = pile.reset_pile()
        random.shuffle(self.deck)


class UnoPile:

    def __init__(self, deck):
        card = deck.deal_card()
        self.pile = [card]

    def __str__(self):
        return 'The pile has ' + str(self.pile[-1]) + ' on top.'

    def top_card(self):
        return self.pile[-1]

    def add_card(self, card):
        self.pile.append(card)

    def reset_pile(self):
        newdeck = self.pile[:-1]
        self.pile = [self.pile[-1]]
        return newdeck


class UnoPlayer:

    def __init__(self, name, deck):
        self.name = name
        self.hand = [deck.deal_card() for i in range(7)]

    def __str__(self):
        return str(self.name) + ' has ' + str(len(self.hand)) + ' cards.'

    def get_name(self):
        return self.name

    def get_hand(self):
        output = ''
        for card in self.hand:
            output += str(card) + '\n'
        return output

    def has_won(self):
        return len(self.hand) == 0

    def draw_card(self, deck):
        card = deck.deal_card()
        self.hand.append(card)
        return card

    def play_card(self, card, pile):
        self.hand.remove(card)
        pile.add_card(card)

    def take_turn(self, deck, pile):
        print(self.name + ", it's your turn.")
        print(pile)
        print("Your hand: ")
        print(self.get_hand())
        topcard = pile.top_card()
        matches = [card for card in self.hand if card.is_match(topcard)]
        if len(matches) > 0:
            for index in range(len(matches)):
                print(str(index + 1) + ": " + str(matches[index]))
            choice = 0
            while choice < 1 or choice > len(matches):
                choice = int(input())
            self.play_card(matches[choice - 1], pile)
            print("Your played card is " + str(matches[0]))

        else:
            print("You can't play, so you have to draw.")
            if deck.is_empty():
                deck.reset_deck(pile)
            newcard = self.draw_card(deck)
            print("You drew: " + str(newcard))
            if newcard.is_match(topcard):
                print("Good -- you can play that!")
                self.play_card(newcard, pile)
            else:
                print("Sorry, you still can't play.")


def play_uno(numPlayers):
    deck = CollectionOfUnoCard()
    pile = UnoPile(deck)
    playerList = []
    for n in range(numPlayers):
        name = input('Player #' + str(n + 1) + ', enter your name: ')
        playerList.append(UnoPlayer(name, deck))
    currentPlayerNum = random.randrange(numPlayers)
    while True:
        print('-------')
        for player in playerList:
            print(player)
        print('-------')
        playerList[currentPlayerNum].take_turn(deck, pile)
        if playerList[currentPlayerNum].has_won():
            print(playerList[currentPlayerNum].get_name() + " wins!")
            print("Thanks for playing!")
            break
        currentPlayerNum = (currentPlayerNum + 1) % numPlayers


play_uno(2)
